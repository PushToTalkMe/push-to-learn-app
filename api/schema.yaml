openapi: 3.0.0
paths:
  /auth/sign-up:
    post:
      operationId: AuthController_signUp
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpBodyDto'
      responses:
        '201':
          description: ''
  /auth/update:
    patch:
      operationId: AuthController_updateRole
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUpdateRoleDto'
      responses:
        '200':
          description: ''
  /auth/delete:
    delete:
      operationId: AuthController_delete
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
  /auth/sign-in:
    post:
      operationId: AuthController_signIn
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInBodyDto'
      responses:
        '200':
          description: ''
  /auth/sign-out:
    post:
      operationId: AuthController_signOut
      parameters: []
      responses:
        '200':
          description: ''
  /auth/session:
    get:
      operationId: AuthController_getSessionInfo
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInfoDto'
  /account:
    get:
      operationId: AccountController_getAccount
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
    patch:
      operationId: AccountController_patchAccount
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAccountDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
  /courses/create:
    post:
      operationId: CoursesController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseDto'
      responses:
        '201':
          description: ''
  /courses/update/{courseId}:
    patch:
      operationId: CoursesController_patchCourse
      parameters:
        - name: courseId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchCourseDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCourseDto'
  /courses:
    get:
      operationId: CoursesController_getAllCourses
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseDto'
  /courses/{courseId}:
    delete:
      operationId: CoursesController_delete
      parameters:
        - name: courseId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDto'
  /courses/notMy/{courseId}:
    get:
      operationId: CoursesController_getNotMyCourseById
      parameters:
        - name: courseId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDtoWithLessonCount'
  /courses/my:
    get:
      operationId: CoursesController_getMyCourses
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseDtoWithUserStat'
  /courses/my/{courseId}:
    get:
      operationId: CoursesController_getCourseById
      parameters:
        - name: courseId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDtoWithSections'
  /courses/my/{courseId}/sections/{sectionId}/lessons/{lessonId}:
    get:
      operationId: CoursesController_getPageLesson
      parameters:
        - name: courseId
          required: true
          in: path
          schema:
            type: number
        - name: sectionId
          required: true
          in: path
          schema:
            type: number
        - name: lessonId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonDtoWithViewed'
  /courses/my/{courseId}/sections/{sectionId}/lessons/{lessonId}/viewed:
    patch:
      operationId: CoursesController_lessonViewed
      parameters:
        - name: courseId
          required: true
          in: path
          schema:
            type: number
        - name: sectionId
          required: true
          in: path
          schema:
            type: number
        - name: lessonId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: boolean
  /sections/create:
    post:
      operationId: SectionsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSectionDto'
      responses:
        '201':
          description: ''
  /sections/update/{sectionId}:
    patch:
      operationId: SectionsController_patchSection
      parameters:
        - name: sectionId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchSectionDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionDto'
  /sections/delete/{sectionId}:
    delete:
      operationId: SectionsController_deleteSection
      parameters:
        - name: sectionId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
  /lessons/create:
    post:
      operationId: LessonsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLessonDto'
      responses:
        '201':
          description: ''
  /lessons/update/{lessonId}:
    patch:
      operationId: LessonsController_patchCourse
      parameters:
        - name: lessonId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchLessonDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonDto'
  /lessons/delete/{lessonId}:
    delete:
      operationId: LessonsController_deletelesson
      parameters:
        - name: lessonId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
  /buy/{courseId}:
    post:
      operationId: BuyController_buyCourse
      parameters:
        - name: courseId
          required: true
          in: path
          schema:
            type: number
      responses:
        '201':
          description: ''
info:
  title: server
  description: ''
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  schemas:
    SignUpBodyDto:
      type: object
      properties:
        email:
          type: string
          example: test@mail.ru
        password:
          type: string
          example: '12345678'
        firstName:
          type: string
          example: Имя
        lastName:
          type: string
          example: Фамилия
      required:
        - email
        - password
        - firstName
        - lastName
    PatchUpdateRoleDto:
      type: object
      properties:
        email:
          type: string
          example: student@mail.ru
        role:
          type: string
          example: admin
      required:
        - email
        - role
    SignInBodyDto:
      type: object
      properties:
        email:
          type: string
          example: test@mail.ru
        password:
          type: string
          example: '12345678'
      required:
        - email
        - password
    SessionInfoDto:
      type: object
      properties:
        id:
          type: number
        email:
          type: string
        role:
          type: string
        iat:
          type: number
        exp:
          type: number
      required:
        - id
        - email
        - role
        - iat
        - exp
    AccountDto:
      type: object
      properties:
        id:
          type: number
        userId:
          type: number
        firstName:
          type: string
          example: Vlad
        lastName:
          type: string
          example: Ilyin
        username:
          type: string
          example: PushToTalk
      required:
        - id
        - userId
        - firstName
        - lastName
        - username
    PatchAccountDto:
      type: object
      properties:
        firstName:
          type: string
          example: Vlad
        lastName:
          type: string
          example: Ilyin
        username:
          type: string
          example: PushToTalk
      required:
        - firstName
        - lastName
        - username
    CreateCourseDto:
      type: object
      properties:
        title:
          type: string
          example: NextJS + NestJS
        img:
          type: string
          example: https://imgs.ru/img#23124123
        duration:
          type: string
          example: 7.5 часов
        tags:
          example:
            - Frontend
            - Backend
            - Fullstack
          type: array
          items:
            type: string
        price:
          type: number
          example: 3999
      required:
        - title
        - img
        - duration
        - tags
        - price
    PatchCourseDto:
      type: object
      properties:
        title:
          type: string
          example: NextJS + NestJS
        img:
          type: string
          example: https://imgs.ru/img#23124123
        duration:
          type: string
          example: 7.5 часов
        tags:
          example:
            - Frontend
            - Backend
            - Fullstack
          type: array
          items:
            type: string
        price:
          type: number
          example: 3999
        sequence:
          type: number
          example: '5'
      required:
        - title
        - img
        - duration
        - tags
        - price
        - sequence
    CourseDto:
      type: object
      properties:
        id:
          type: number
          example: 1
        title:
          type: string
          example: NextJS + NestJS
        author:
          type: string
          example: Vlad Ilyin
        img:
          type: string
          example: uri
        duration:
          type: string
          example: 7.5 часов
        tags:
          example:
            - JavaScript
            - Frontend
            - Backend
          type: array
          items:
            type: string
        price:
          type: number
          example: 1
        sequence:
          type: number
          example: 1
        createdAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
        updatedAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
      required:
        - id
        - title
        - author
        - img
        - duration
        - tags
        - price
        - sequence
        - createdAt
        - updatedAt
    CourseDtoWithLessonCount:
      type: object
      properties:
        id:
          type: number
          example: 1
        title:
          type: string
          example: NextJS + NestJS
        author:
          type: string
          example: Vlad Ilyin
        img:
          type: string
          example: uri
        duration:
          type: string
          example: 7.5 часов
        tags:
          example:
            - JavaScript
            - Frontend
            - Backend
          type: array
          items:
            type: string
        price:
          type: number
          example: 1
        sequence:
          type: number
          example: 1
        createdAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
        updatedAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
        lessonCount:
          type: number
          example: 5
      required:
        - id
        - title
        - author
        - img
        - duration
        - tags
        - price
        - sequence
        - createdAt
        - updatedAt
        - lessonCount
    CourseDtoWithUserStat:
      type: object
      properties:
        id:
          type: number
          example: 1
        title:
          type: string
          example: NextJS + NestJS
        author:
          type: string
          example: Vlad Ilyin
        img:
          type: string
          example: uri
        duration:
          type: string
          example: 7.5 часов
        tags:
          example:
            - JavaScript
            - Frontend
            - Backend
          type: array
          items:
            type: string
        price:
          type: number
          example: 1
        sequence:
          type: number
          example: 1
        createdAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
        updatedAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
        lessonCount:
          type: number
          example: 5
        lessonCompleted:
          type: number
          example: 1
        historySectionId:
          type: number
          example: 1
        historyLessonId:
          type: number
          example: 1
      required:
        - id
        - title
        - author
        - img
        - duration
        - tags
        - price
        - sequence
        - createdAt
        - updatedAt
        - lessonCount
        - lessonCompleted
        - historySectionId
        - historyLessonId
    LessonStat:
      type: object
      properties:
        id:
          type: number
          example: 5
        title:
          type: string
          example: Что такое NestJS
        type:
          type: string
          enum:
            - Theory
            - Test
            - Exercise
        viewed:
          type: boolean
          example: true
        sequence:
          type: number
          example: 1
      required:
        - id
        - title
        - type
        - viewed
        - sequence
    SectionsWithLessonsStatDto:
      type: object
      properties:
        lessonsStat:
          example:
            - id: 1
              title: Введение
              type: Theory
              viewed: true
              sequence: 1
            - id: 2
              title: Упражнение по HTML
              type: Exercise
              viewed: false
              sequence: 2
            - id: 3
              title: Тест по HTML
              type: Test
              viewed: false
              sequence: 3
          type: array
          items:
            $ref: '#/components/schemas/LessonStat'
        id:
          type: number
          example: '1'
        title:
          type: string
          example: Введение
        courseId:
          type: number
          example: '2'
        sequence:
          type: number
          example: '5'
        createdAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
        updatedAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
      required:
        - lessonsStat
        - id
        - title
        - courseId
        - sequence
        - createdAt
        - updatedAt
    CourseDtoWithSections:
      type: object
      properties:
        id:
          type: number
          example: 1
        title:
          type: string
          example: NextJS + NestJS
        author:
          type: string
          example: Vlad Ilyin
        img:
          type: string
          example: uri
        duration:
          type: string
          example: 7.5 часов
        tags:
          example:
            - JavaScript
            - Frontend
            - Backend
          type: array
          items:
            type: string
        price:
          type: number
          example: 1
        sequence:
          type: number
          example: 1
        createdAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
        updatedAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
        sectionsWithLessonsStat:
          example:
            - id: 1
              title: Введение
              courseId: 1
              sequence: 1
              createdAt: '2024-07-01T10:23:15.094Z'
              updatedAt: '2024-07-01T10:23:15.094Z'
              lessonsStat:
                - title: Введение
                  type: Theory
                  viewed: true
                - title: Упражнение по HTML
                  type: Exercise
                  viewed: false
                - title: Тест по HTML
                  type: Test
                  viewed: false
          type: array
          items:
            $ref: '#/components/schemas/SectionsWithLessonsStatDto'
        lessonCompleted:
          type: number
          example: 1
        lessonCount:
          type: number
          example: 1
        historySectionId:
          type: number
          example: 1
        historyLessonId:
          type: number
          example: 1
      required:
        - id
        - title
        - author
        - img
        - duration
        - tags
        - price
        - sequence
        - createdAt
        - updatedAt
        - sectionsWithLessonsStat
        - lessonCompleted
        - lessonCount
        - historySectionId
        - historyLessonId
    LessonDtoWithViewed:
      type: object
      properties:
        id:
          type: number
          example: 5
        sectionId:
          type: number
          example: 1
        sequence:
          type: number
          example: 2
        title:
          type: string
          example: Что такое NestJS
        data:
          type: object
          example:
            content: '##Введение'
        type:
          type: string
          enum:
            - Theory
            - Test
            - Exercise
        createdAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
        updatedAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
        viewed:
          type: boolean
          example: false
      required:
        - id
        - sectionId
        - sequence
        - title
        - data
        - type
        - createdAt
        - updatedAt
        - viewed
    CreateSectionDto:
      type: object
      properties:
        title:
          type: string
          example: Введение
        courseId:
          type: number
          example: '1'
      required:
        - title
        - courseId
    PatchSectionDto:
      type: object
      properties:
        title:
          type: string
          example: Введение
        sequence:
          type: number
          example: '5'
      required:
        - title
        - sequence
    SectionDto:
      type: object
      properties:
        id:
          type: number
          example: '1'
        title:
          type: string
          example: Введение
        courseId:
          type: number
          example: '1'
        sequence:
          type: number
          example: '5'
        createdAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
        updatedAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
      required:
        - id
        - title
        - courseId
        - sequence
        - createdAt
        - updatedAt
    CreateLessonDto:
      type: object
      properties:
        title:
          type: string
          example: Введение
        data:
          type: object
          example:
            content: '##Введение'
        type:
          type: string
          enum:
            - Theory
            - Test
            - Exercise
        sectionId:
          type: number
          example: 5
      required:
        - title
        - data
        - type
        - sectionId
    PatchLessonDto:
      type: object
      properties:
        title:
          type: string
          example: Введение
        data:
          type: object
          example:
            content: '##Введение'
        sequence:
          type: number
          example: 1
      required:
        - title
        - data
        - sequence
    LessonDto:
      type: object
      properties:
        id:
          type: number
          example: 5
        sectionId:
          type: number
          example: 1
        sequence:
          type: number
          example: 2
        title:
          type: string
          example: Что такое NestJS
        data:
          type: object
          example:
            content: '##Введение'
        type:
          type: string
          enum:
            - Theory
            - Test
            - Exercise
        createdAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
        updatedAt:
          format: date-time
          type: string
          example: '2024-06-17T13:55:38.747Z'
      required:
        - id
        - sectionId
        - sequence
        - title
        - data
        - type
        - createdAt
        - updatedAt
